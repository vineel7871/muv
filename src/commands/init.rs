use crate::cli::InitArgs;
use anyhow::{Context, Result, bail};
use std::env;
use std::fs::{OpenOptions, read_to_string};
use std::io::Write;
use std::path::PathBuf;

const MUV_INIT_BLOCK_START: &str = "# MUV INIT START";
const MUV_INIT_BLOCK_END: &str = "# MUV INIT END";

fn get_shell_config_path() -> Result<(String, PathBuf)> {
    let shell_path = env::var("SHELL").unwrap_or_else(|_| "/bin/bash".to_string());
    let shell_name = PathBuf::from(&shell_path)
        .file_name()
        .and_then(|s| s.to_str())
        .unwrap_or("bash")
        .to_lowercase();

    let home_dir =
        dirs::home_dir().ok_or_else(|| anyhow::anyhow!("Could not find home directory"))?;

    match shell_name.as_str() {
        "bash" => Ok(("bash".to_string(), home_dir.join(".bashrc"))),
        "zsh" => Ok(("zsh".to_string(), home_dir.join(".zshrc"))),
        _ => bail!(
            "Unsupported shell: {}. MUV init currently supports bash and zsh.",
            shell_name
        ),
    }
}

fn generate_muv_function_content() -> Result<String> {
    let current_exe_path = env::current_exe()
        .context("Failed to get current executable path. Please ensure muv is in your PATH or provide the full path.")?;
    let muv_binary_path_str = current_exe_path
        .to_str()
        .ok_or_else(|| anyhow::anyhow!("Executable path is not valid UTF-8"))?;

    let _escaped_muv_binary_path = muv_binary_path_str
        .replace('\\', "\\\\")
        .replace('"', "\\\"");

    Ok(format!(
        r#"# MUV shell functions
# This file contains shell functions for the muv tool

muv() {{
    local cmd="$1"
    local output
    local ret_code
    local muv_exe_path

    if [ -n "$MUV_BINARY_PATH" ] && [ -x "$MUV_BINARY_PATH" ]; then
        muv_exe_path="$MUV_BINARY_PATH"
    elif command -v muv >/dev/null 2>&1; then
        muv_exe_path="$(command -v muv)"
    else
        echo "Error: 'muv' executable not found." >&2
        echo "Please ensure MUV_BINARY_PATH is set correctly in your shell config," >&2
        echo "or that 'muv' is in your system PATH." >&2
        echo "You might need to run 'muv init' again or manually edit your shell config." >&2
        return 1
    fi

    case "$cmd" in
        activate)
            if [ -z "$2" ]; then
                echo "Usage: muv activate <environment_name>" >&2
                "$muv_exe_path" activate --help
                return 1
            fi
            shift
            output="$("$muv_exe_path" activate "$@" 2> >(tee /dev/stderr >&2))"
            ret_code=$?

            if [ $ret_code -eq 0 ] && [ -n "$output" ]; then
                eval "$output"
                return $?
            elif [ $ret_code -ne 0 ]; then
                return $ret_code
            else
                echo "muv: activation command produced no output or an error occurred." >&2
                return 1
            fi
            ;;
        deactivate)
            if declare -f -F deactivate > /dev/null && [ -n "$MUV_ENV_NAME" ]; then
                 deactivate
                 return $?
            fi
            shift
            output="$("$muv_exe_path" deactivate "$@" 2> >(tee /dev/stderr >&2))"
            ret_code=$?
            if [ $ret_code -eq 0 ] && [ -n "$output" ]; then
                eval "$output"
                return $?
            elif [ $ret_code -ne 0 ]; then
                return $ret_code
            else
                echo "muv: deactivation command produced no output or an error occurred." >&2
                return 1
            fi
            ;;
        *)
            "$muv_exe_path" "$@"
            return $?
            ;;
    esac
}}"#
    ))
}

fn generate_shell_script_content() -> Result<String> {
    let current_exe_path = env::current_exe()
        .context("Failed to get current executable path. Please ensure muv is in your PATH or provide the full path.")?;
    let muv_binary_path_str = current_exe_path
        .to_str()
        .ok_or_else(|| anyhow::anyhow!("Executable path is not valid UTF-8"))?;

    let escaped_muv_binary_path = muv_binary_path_str
        .replace('\\', "\\\\")
        .replace('"', "\\\"");

    Ok(format!(
        r#"
{MUV_INIT_BLOCK_START}
# This block was auto-generated by 'muv init'.
# To re-generate, run 'muv init --force'.

# Set this to the path of your muv binary if it's not in your PATH
export MUV_BINARY_PATH="{escaped_muv_binary_path}"

# Source the muv functions from separate file
[ -f "$HOME/.muv-functions.sh" ] && source "$HOME/.muv-functions.sh"
{MUV_INIT_BLOCK_END}
"#
    ))
}

fn is_muv_initialized(config_content: &str) -> bool {
    config_content.contains(MUV_INIT_BLOCK_START) && config_content.contains(MUV_INIT_BLOCK_END)
}

fn remove_existing_muv_block(content: &str) -> String {
    let mut new_content = String::new();
    let mut in_muv_block = false;
    for line in content.lines() {
        if line.trim() == MUV_INIT_BLOCK_START {
            in_muv_block = true;
            continue;
        }
        if line.trim() == MUV_INIT_BLOCK_END {
            in_muv_block = false;
            continue;
        }
        if !in_muv_block {
            new_content.push_str(line);
            new_content.push('\n');
        }
    }
    if !content.ends_with('\n') && new_content.ends_with('\n') {
        new_content.pop();
    }
    new_content
}

pub fn handle_init(args: InitArgs) -> Result<()> {
    let (shell_name, config_path) = get_shell_config_path()?;
    let home_dir =
        dirs::home_dir().ok_or_else(|| anyhow::anyhow!("Could not find home directory"))?;
    let functions_path = home_dir.join(".muv-functions.sh");

    println!(
        "Detected shell: {} (config file: {})",
        shell_name,
        config_path.display()
    );

    let mut config_content = if config_path.exists() {
        read_to_string(&config_path).with_context(|| {
            format!(
                "Failed to read shell config file: {}",
                config_path.display()
            )
        })?
    } else {
        println!(
            "Shell config file {} does not exist. It will be created.",
            config_path.display()
        );
        String::new()
    };

    if is_muv_initialized(&config_content) {
        if args.force {
            println!("MUV seems to be already initialized. --force specified, re-initializing...");
            config_content = remove_existing_muv_block(&config_content);
        } else {
            println!(
                "MUV seems to be already initialized in {}.",
                config_path.display()
            );
            println!("To re-initialize, run 'muv init --force'.");
            println!("To apply changes, please source your shell config or open a new terminal:");
            println!("  source {}", config_path.display());
            return Ok(());
        }
    }

    let functions_content = generate_muv_function_content()?;
    let mut functions_file = OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true)
        .open(&functions_path)
        .with_context(|| {
            format!(
                "Failed to create functions file: {}",
                functions_path.display()
            )
        })?;

    functions_file
        .write_all(functions_content.as_bytes())
        .with_context(|| format!("Failed to write to {}", functions_path.display()))?;

    let script_to_add = generate_shell_script_content()?;

    if !config_content.is_empty() && !config_content.ends_with('\n') {
        config_content.push('\n');
    }
    config_content.push_str(&script_to_add);
    if !config_content.ends_with('\n') {
        config_content.push('\n');
    }

    let mut file = OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true)
        .open(&config_path)
        .with_context(|| format!("Failed to open {} for writing", config_path.display()))?;

    file.write_all(config_content.as_bytes())
        .with_context(|| format!("Failed to write to {}", config_path.display()))?;

    println!(
        "\nMUV initialization script added to {}.",
        config_path.display()
    );
    println!("MUV functions written to {}.", functions_path.display());
    println!("Please source your shell config file or open a new terminal to apply changes:");
    println!("  source {}", config_path.display());
    println!("\nAfter that, you can use 'muv activate <env>' and 'muv deactivate' directly.");

    Ok(())
}
